<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker 学习</title>
    <link href="/2024/05/26/docker_learn_note/"/>
    <url>/2024/05/26/docker_learn_note/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-学习笔记"><a href="#docker-学习笔记" class="headerlink" title="docker 学习笔记"></a>docker 学习笔记</h2><h3 id="1-基础教程"><a href="#1-基础教程" class="headerlink" title="1. 基础教程"></a>1. 基础教程</h3><p>参考教程：</p><ol><li><a href="https://blog.csdn.net/qq_40298902/article/details/105967342">菜鸟入门Docker</a></li><li><a href="https://blog.csdn.net/qq_32101863/article/details/120341856">Docker 封装anaconda环境，生成镜像并打包1</a></li><li><a href="https://blog.csdn.net/qq_32101863/article/details/120344080">Docker 封装anaconda环境，生成镜像并打包2</a></li><li><a href="https://www.runoob.com/docker/docker-image-usage.html">Docker 菜鸟教程</a></li></ol><h3 id="2-docker镜像准备"><a href="#2-docker镜像准备" class="headerlink" title="2. docker镜像准备"></a>2. docker镜像准备</h3><h4 id="下载基础镜像"><a href="#下载基础镜像" class="headerlink" title="下载基础镜像"></a>下载基础镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull ubuntu:18.04<br></code></pre></td></tr></table></figure><h4 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h4><p>编写Dockerfile文件，内容示例如下：<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用官方的 Python 3.8 镜像作为基础镜像</span><br>FROM python:3.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 wget</span><br><br>RUN apt-get update &amp;&amp; apt-get install -y wget &amp;&amp; rm -rf /var/lib/apt/lists/*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载 Miniconda 安装脚本</span><br><br>RUN wget -q[https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh](https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh) -O miniconda.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 Miniconda</span><br><br>RUN bash miniconda.sh -b -p /opt/miniconda &amp;&amp;<br>rm miniconda.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化 Conda</span><br><br>RUN /opt/miniconda/bin/conda init bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建新的 Conda 环境</span><br><br>ENV CONDA_ENV=myenv<br>RUN conda create -y --name $CONDA_ENV python=3.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">激活 Conda 环境</span><br><br>RUN echo &quot;conda activate $CONDA_ENV&quot; &gt;&gt; ~/.bashrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装所需的包</span><br><br>RUN conda install -y -n $CONDA_ENV numpy pandas matplotlib<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置容器内的工作目录</span><br><br>WORKDIR /usr/src/app<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置容器启动时的命令</span><br><br>CMD [&quot;/bin/bash&quot;]<br></code></pre></td></tr></table></figure></p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build --network host -t mirrors.tencent.com/star_library/tlinux-64bit-python3.6:0415 .<br></code></pre></td></tr></table></figure><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以下方括号内容为需要根据实际需求替换的字符串</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">登录至软件源docker registry，[user]为OA账号名，[token]为软件源系统分配，可以通过【快捷指令】获取</span><br>sudo docker login --username [user] --password [token] mirrors.tencent.com<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">push镜像至软件源docker registry，[image_id]即docker镜像的<span class="hljs-built_in">id</span>，可以通过sudo docker image list命令查看</span><br>sudo docker tag [image_id] mirrors.tencent.com/[namespace]/[repo]:[tag]<br>sudo docker push mirrors.tencent.com/[namespace]/[repo]:[tag]<br><br>如<br>docker push mirrors.tencent.com/gethinhu/tlinux-64bit-python3.6:0415<br></code></pre></td></tr></table></figure><h3 id="3-调试"><a href="#3-调试" class="headerlink" title="3. 调试"></a>3. 调试</h3><p>为了保证调试时训练程序运行环境与线上实际的运行环境一致，需要在开发机上用与线上相同的docker镜像启动容器</p><p>为了方便，平台也准备了一个脚本run_docker.sh，可以从附件下载使用。使用方法：</p><p>注意：</p><p>如果报错‘run_docker.sh : command not found’，请检查&#x2F;usr&#x2F;local&#x2F;bin是否包含在$PATH里，如果没有，将其加入$PATH。</p><p>如果报错‘docker: Error response from daemon: could not select device driver “” with capabilities: [[gpu]].’，是因为开发机没安装nvidia-docker，可以联系O2000(Oteam统一技术支持)解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 编写run_docker.sh</span><br>        # 示例<br><br>        #!/bin/bash<br>        image_full_name=$1<br>        if [ -z $&#123;image_full_name&#125; ]<br>        then<br>        echo &quot;mirrors.tencent.com/lllzheng/cuda11.8-ubuntu20.04:0511    \n&quot;<br>        exit 0<br>        fi<br><br>        cmd=$2<br>        if [ -z &quot;$&#123;cmd&#125;&quot; ]<br>        then<br>        echo &quot;cd /apdcephfs/private_lllzheng/taiji/peg-in-hole-6D/     \n&quot;<br>        echo &quot;conda activate mujoco     \n&quot;<br>        echo &quot;python3 /apdcephfs/private_lllzheng/taiji/peg-in-hole-6D/try_train.py     \n&quot;<br>        exit 0<br>        fi<br><br>        echo $&#123;image_full_name&#125;<br>        echo $&#123;cmd&#125;<br>        docker run -it --gpus all --network=host --name test -v /apdcephfs/:/apdcephfs/private_lllzheng  $&#123;image_full_name&#125;  $&#123;cmd&#125;<br><br>        #如果docker -v版本小于19.03，请使用以下docker run命令<br>        #docker run -it -e NVIDIA_VISIBLE_DEVICES=all --network=host -v /apdcephfs/:/apdcephfs/  $&#123;image_full_name&#125;  $&#123;cmd&#125;<br><br>        # sudo bash run_docker.sh mirrors.tencent.com/lllzheng/cuda11.8-ubuntu20.04:0511 /bin/bash -c &quot;cd /apdcephfs/private_lllzheng/taiji/peg-in-hole-6D/ &amp;&amp; conda activate mujoco &amp;&amp; python3 /apdcephfs/private_lllzheng/taiji/peg-in-hole-6D/try_train.py&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 运行run_docker.sh</span><br>chmod +x run_docker.sh<br>run_docker.sh $&#123;image_full_name&#125; $&#123;cmd&#125;<br>eg：run_docker.sh mirrors.tencent.com/star_library/g-tlinux2.2-python3.6-cuda9.0-cudnn7.6-tf1.12:latest /bin/bash -c &quot;python3.6 /apdcephfs/private_gethinhu/mnist_trainer/fully_connected_feed.py --train_dir /apdcephfs/share_986015/mnist_dataset/ --max_steps 100000 --batch_size=1000&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mujoco-py 学习</title>
    <link href="/2024/05/26/mujoco-py%20learn_note/"/>
    <url>/2024/05/26/mujoco-py%20learn_note/</url>
    
    <content type="html"><![CDATA[<h2 id="mujoco-py-学习笔记"><a href="#mujoco-py-学习笔记" class="headerlink" title="mujoco-py 学习笔记"></a>mujoco-py 学习笔记</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install mujoco-py<br></code></pre></td></tr></table></figure><h3 id="常见安装错误"><a href="#常见安装错误" class="headerlink" title="常见安装错误"></a>常见安装错误</h3><ul><li>如果报错 Cython.Compiler.Errors.CompileError:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip uninstall cython<br>pip install cython==0.29.21<br></code></pre></td></tr></table></figure><ul><li>tensorboard打不开</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一步：查看端口占用：</span><br>lsof -i:6006<br><span class="hljs-comment"># 第二步：关掉占用端口的进程</span><br><span class="hljs-built_in">kill</span> -9 PID<br></code></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/weixin_44420419/article/details/116231500">mujoco-py安装遇问题</a><br><a href="https://blog.csdn.net/weixin_44420419/article/details/116519279">mujoco-py渲染问题</a></p><h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mujoco_py<br>model = mujoco_py.load_model_from_path(<span class="hljs-string">&quot;path/to/model.xml&quot;</span>)<br>sim = mujoco_py.MjSim(model)<br></code></pre></td></tr></table></figure><p>创建了一个 MjSim 对象，它表示一个 MuJoCo 仿真实例。通过这个对象，执行各种操作，例如执行仿真步骤、获取和设置模型状态、渲染仿真环境等。使用 sim 对象实现或获取的操作：</p><ul><li>执行仿真步骤：使用 <code>sim.step()</code>方法，执行一步仿真。这将根据当前的模型状态和控制输入更新模型的状态。</li><li>获取和设置模型状态：使用 <code>sim.data</code>属性来获取和设置模型的状态。例如，获取关节角度、速度、力矩等信息，也可以设置关节力矩、外部力等。</li><li>渲染仿真环境：使用 <code>sim.render()</code>方法，渲染仿真环境。这将在屏幕上显示仿真环境的当前状态。</li><li>获取和设置控制输入：使用 <code>sim.data.ctrl</code>属性来获取和设置控制输入。例如，设置关节的目标位置、速度或力矩等。</li><li>获取和设置模型参数：使用 <code>sim.model</code>属性来获取和设置模型参数。例如，获取关节的惯量、刚度等信息，也可以设置关节的摩擦系数、阻尼系数等。</li><li>保存和加载仿真状态：使用 <code>sim.save()</code>和 <code>sim.load()</code>方法来保存和加载仿真状态。这可以用于暂停和恢复仿真，或者在多个仿真实例之间共享状态。</li><li>获取和设置相机参数：使用 <code>sim.render_context</code>属性来获取和设置相机参数。例如，设置相机的位置、方向、视野角等。</li></ul><h5 id="sim-data中一些主要的属性"><a href="#sim-data中一些主要的属性" class="headerlink" title="sim.data中一些主要的属性"></a>sim.data中一些主要的属性</h5><ul><li>qpos：关节位置的数组，这个数组包含了模拟中所有关节的位置和所有自由物体的位置和方向。</li><li>qvel：关节速度的数组。</li><li>qacc：关节加速度的数组。</li><li>qfrc_applied：施加到每个关节的外部力的数组。</li><li>qfrc_actuator:</li><li>ctrl：控制器的控制信号的数组。</li><li>time：模拟的当前时间。</li><li>xpos：模型中每个物体的位置的数组。</li><li>xquat：模型中每个物体的四元数表示的方向的数组。</li><li>xmat：模型中每个物体的旋转矩阵表示的方向的数组。</li><li>xipos：模型中每个惯性元素的位置的数组。</li><li>ximat：模型中每个惯性元素的旋转矩阵表示的方向的数组。</li><li>contact：模型中的接触信息。</li></ul><h5 id="PyMjData"><a href="#PyMjData" class="headerlink" title="PyMjData"></a>PyMjData</h5><ul><li><p><code>act</code>: 执行器激活数组，用于控制执行器的激活状态。</p></li><li><p><code>act_dot</code>: 执行器激活的变化率。</p></li><li><p><code>active_contacts_efc_pos</code>: 活动接触点的全局位置。</p></li><li><p><code>actuator_force</code>: 执行器产生的力。</p></li><li><p><code>actuator_length</code>: 执行器的长度。</p></li><li><p><code>actuator_moment</code>: 执行器产生的力矩。</p></li><li><p><code>actuator_velocity</code>: 执行器的速度。</p></li><li><p><code>body_jacp, body_jacr</code>: 与身体相关的雅可比矩阵的偏导数。</p></li><li><p><code>body_xmat, body_xpos, body_xquat, body_xvelp, body_xvelr</code>: 描述身体的位置、方向、速度和旋转的矩阵和向量。</p></li><li><p><code>cacc</code>: 接触点的累积加速度。</p></li><li><p><code>cam_xmat, cam_xpos</code>: 相机的位置和方向。</p></li><li><p><code>cdof, cdof_dot</code>: 自由度的当前值和变化率。</p></li><li><p><code>cfrc_ext</code>: 外部力。</p></li><li><p><code>cfrc_int</code>: 内部力。</p></li><li><p><code>cinert</code>: 惯性张量。</p></li><li><p><code>contact</code>: 接触信息。</p></li><li><p><code>crb</code>: 约束雅可比矩阵。</p></li><li><p><code>ctrl</code>: 控制输入。</p></li><li><p><code>cvel</code>: 接触点的速度。</p></li><li><p><code>efc_AR, efc_D, efc_J, efc_R</code>: 接触力雅可比矩阵、阻尼矩阵、约束雅可比矩阵和旋转矩阵。</p></li><li><p><code>energy</code>: 系统能量。</p></li><li><p><code>geom_jacp, geom_jacr, geom_xmat, geom_xpos, geom_xvelp, geom_xvelr</code>: 几何体的位置、方向、速度。</p></li><li><p><code>light_xdir, light_xpos</code>: 光源的方向和位置。</p></li><li><p><code>maxuse_con, maxuse_efc, maxuse_stack</code>: 各种数组的最大使用数量。</p></li><li><p><code>mocap_pos, mocap_quat</code>: 运动捕捉的位置和四元数。</p></li><li><p><code>nbuffer, ncon, ne, nefc, nf, nstack</code>: 不同类型数据的数量。</p></li><li><p><code>pstack</code>: 预测栈。</p></li><li><p><code>qLD, qLDiagInv, qLDiagSqrtInvInv, qM, qacc, qacc_unc, qacc_warmstart</code>: 与线性代数相关的矩阵和向量。</p></li><li><p><code>qfrc_actuator, qfrc_applied, qfrc_bias, qfrc_constraint, qfrc_inverse, qfrc_passive, qfrc_unc</code>: 与力相关的向量。</p></li><li><p><code>qpos, qvel</code>: 关节位置和速度状态。</p></li><li><p><code>sensordata</code>: 传感器数据。</p></li><li><p><code>set_joint_qpos, set_joint_qvel</code>: 设置关节位置和速度的方法。</p></li><li><p><code>set_mocap_pos, set_mocap_quat</code>: 设置运动捕捉位置和四元数的方法。</p></li><li><p><code>site_jacp, site_jacr, site_xmat, site_xpos, site_xvelp, site_xvelr</code>: 站点的雅可比、位置、方向、速度。</p></li><li><p><code>solver, solver_fwdinv, solver_iter, solver_nnz</code>: 与求解器相关的属性。</p></li><li><p><code>subtree_angmom, subtree_com, subtree_linvel</code>: 子树的角动量、质心和线性速度。</p></li><li><p><code>ten_length, ten_moment, ten_velocity, ten_wrapadr, ten_wrapnum</code>: 肌腱的长度、力矩、速度和缠绕信息。</p></li><li><p><code>time, timer</code>: 仿真时间。</p></li><li><p><code>userdata</code>: 用户自定义数据。</p></li><li><p><code>warning</code>: 警告信息。</p></li><li><p><code>wrap_obj, wrap_xpos</code>: 与肌腱缠绕相关的对象和位置。</p></li><li><p><code>xanchor, xaxis</code>: 与接触有关的锚点和轴。</p></li><li><p><code>ximat, xpos</code>: 位置和方向。</p></li><li><p><code>xfrc_applied</code>: 应用的外部力。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mujoco</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mujoco</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mujoco Q&amp;A</title>
    <link href="/2024/05/25/mujoco_question/"/>
    <url>/2024/05/25/mujoco_question/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Mujoco安装"><a href="#一、Mujoco安装" class="headerlink" title="一、Mujoco安装"></a>一、Mujoco安装</h2><p>这是一句话<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Mujoco Python](https://mujoco.readthedocs.io/en/stable/python.html#)">[1]</span></a></sup></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mujoco.readthedocs.io/en/stable/python.html#">Mujoco Python</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Mujoco</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mujoco</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uubuntu20.04 系统配置</title>
    <link href="/2024/05/25/ubuntu%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/05/25/ubuntu%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-安装浏览器"><a href="#一、-安装浏览器" class="headerlink" title="一、 安装浏览器"></a>一、 安装浏览器</h2><ul><li><p>安装Edge浏览器</p></li><li><p>安装网络工具<br>工具在手，天下我有！<br><a href="https://github.com/lantongxue/clash_for_windows_pkg/releases">下载地址</a></p></li><li><p>VsCode安装和更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>wget http://fishros.com/install -O fishros &amp;&amp; . fishros<br><br><span class="hljs-comment">#先更新源</span><br>sudo apt-get update<br><br><span class="hljs-comment">#再安装vscode</span><br>sudo apt-get install code<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、配置终端"><a href="#二、配置终端" class="headerlink" title="二、配置终端"></a>二、配置终端</h2><p><a href="https://blog.csdn.net/qq_43447339/article/details/135758451">zsh配置</a></p><h2 id="三、软件、环境等配置"><a href="#三、软件、环境等配置" class="headerlink" title="三、软件、环境等配置"></a>三、软件、环境等配置</h2><h3 id="1-ROS2配置"><a href="#1-ROS2配置" class="headerlink" title="1. ROS2配置"></a>1. ROS2配置</h3><p><a href="https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97?lang=zh-CN">ROS2一键安装教程</a></p><h3 id="2-深度学习环境配置"><a href="#2-深度学习环境配置" class="headerlink" title="2. 深度学习环境配置"></a>2. 深度学习环境配置</h3><h4 id="1-CUDA安装"><a href="#1-CUDA安装" class="headerlink" title="(1) CUDA安装"></a>(1) CUDA安装</h4><ul><li>软件更新—&gt;附加驱动</li><li>ubuntu 20.04 cuda12.0安装命令<br><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA下载地址</a><br><a href="https://blog.csdn.net/weixin_37926734/article/details/123033286">参考博客</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin<br>sudo <span class="hljs-built_in">mv</span> cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600<br>wget https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda-repo-ubuntu2004-12-0-local_12.0.0-525.60.13-1_amd64.deb<br>sudo dpkg -i cuda-repo-ubuntu2004-12-0-local_12.0.0-525.60.13-1_amd64.deb<br>sudo <span class="hljs-built_in">cp</span> /var/cuda-repo-ubuntu2004-12-0-<span class="hljs-built_in">local</span>/cuda-*-keyring.gpg /usr/share/keyrings/<br>sudo apt-get update<br>sudo apt-get -y install cuda<br></code></pre></td></tr></table></figure><h4 id="2-Conda环境配置"><a href="#2-Conda环境配置" class="headerlink" title="(2) Conda环境配置"></a>(2) Conda环境配置</h4><ul><li>关闭自动激活的base环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="3-Git配置"><a href="#3-Git配置" class="headerlink" title="(3) Git配置"></a>(3) Git配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">git安装与卸载<br>apt-get install git apt-get remove git<br><br>git配置<br>配置用户名<br>git config --global user.name “zl”<br>配置邮箱<br>git config --global user.email “zlsy@mail.ustc.edu.cn”<br>查看配置信息<br>git config --global --list<br>生成公钥<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;zlsy@mail.ustc.edu.cn&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-pip镜像源配置"><a href="#4-pip镜像源配置" class="headerlink" title="(4) pip镜像源配置"></a>(4) pip镜像源配置</h4><ul><li>临时使用pip镜像源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple/ <br></code></pre></td></tr></table></figure><ul><li>永久配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/.pip  <span class="hljs-comment">#创建一个名为.pip的文件夹</span><br><span class="hljs-built_in">cd</span> ~/.pip    <span class="hljs-comment">#进入创建的文件夹</span><br><span class="hljs-built_in">touch</span> pip.conf  <span class="hljs-comment">#创建pip.conf</span><br>sudo gedit ~/.pip/pip.conf   <span class="hljs-comment">#编辑文件</span><br> <br>复制下面的内容到文件中（配置的豆瓣源，也可以配置别的）<br>[global]<br>index-url = https://pypi.mirrors.ustc.edu.cn/simple/<br>[install]<br>trusted-host=pypi.mirrors.ustc.edu.cn<br><br>镜像源推荐<br>（1）阿里云 https://mirrors.aliyun.com/pypi/simple/<br>（2）豆瓣https://pypi.douban.com/simple/<br>（3）清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/<br>（4）中国科学技术大学 https://pypi.mirrors.ustc.edu.cn/simple/<br>（5）华中科技大学https://pypi.hustunique.com/<br></code></pre></td></tr></table></figure><h3 id="3-软件安装"><a href="#3-软件安装" class="headerlink" title="3.软件安装"></a>3.软件安装</h3><h4 id="CoppeliaSim"><a href="#CoppeliaSim" class="headerlink" title="CoppeliaSim"></a>CoppeliaSim</h4><ul><li><a href="https://blog.csdn.net/qq_43447339/article/details/135889186">创建快捷方式</a></li><li>终端打开（推荐）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> vrep=<span class="hljs-string">&#x27;/opt/CoppeliaSim/CoppeliaSim_Edu_V4_1_0_Ubuntu20_04/coppeliaSim.sh&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Mujoco"><a href="#Mujoco" class="headerlink" title="Mujoco"></a>Mujoco</h4><ul><li><a href="https://blog.csdn.net/weixin_51844581/article/details/128454472">Ubuntu20.04安装Mujoco</a></li><li>相关问题<br>—————————-完善中——————————-</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mujoco 学习笔记</title>
    <link href="/2024/05/25/mujoco_learn/"/>
    <url>/2024/05/25/mujoco_learn/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Mujoco安装"><a href="#一、Mujoco安装" class="headerlink" title="一、Mujoco安装"></a>一、Mujoco安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install mujoco<br></code></pre></td></tr></table></figure><h2 id="二、交互式查看器"><a href="#二、交互式查看器" class="headerlink" title="二、交互式查看器"></a>二、交互式查看器</h2><h3 id="命令行打开"><a href="#命令行打开" class="headerlink" title="命令行打开"></a>命令行打开</h3><ul><li>启动一个空的可视化会话，其中可以通过拖放加载模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m mujoco.viewer<br></code></pre></td></tr></table></figure><ul><li>指定加载模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m mujoco.viewer --mjcf=/path/to/some/mjcf.xml<br></code></pre></td></tr></table></figure><h3 id="Python程序中打开"><a href="#Python程序中打开" class="headerlink" title="Python程序中打开"></a>Python程序中打开</h3><ul><li><code>viewer.launch()</code></li></ul><p>启动一个空的可视化会话，其中可以通过拖放加载模型。</p><ul><li><code>viewer.launch(model)</code></li></ul><p>可视化工具启动给定的可视化会话 在内部创建自己的实例</p><ul><li><code>viewer.launch(model, data)</code></li></ul><p>与上述相同，只是可视化工具直接在给定实例上运行，退出时对象将被修改。</p><h3 id="被动查看器"><a href="#被动查看器" class="headerlink" title="被动查看器"></a>被动查看器</h3><ul><li><code>viewer.launch_passive(model, data)</code></li></ul><p>创建一个被动查看器实例。在此模式下，函数不会阻塞，允许代码继续执行。用户的脚本负责计时和推进物理状态，除非用户显式同步传入事件，否则鼠标拖动将不起作用</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mujoco<br></code></pre></td></tr></table></figure><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考[1]"></a>参考<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Mujoco Python](https://mujoco.readthedocs.io/en/stable/python.html#)">[1]</span></a></sup></h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mujoco.readthedocs.io/en/stable/python.html#">Mujoco Python</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Mujoco</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mujoco</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows/Ubuntu22.04 解决CoppeliaSim界面字体过小问题</title>
    <link href="/2024/05/25/coppeliasim/"/>
    <url>/2024/05/25/coppeliasim/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu22-04-解决VREP-CoppeliaSim-界面字体过小问题"><a href="#Ubuntu22-04-解决VREP-CoppeliaSim-界面字体过小问题" class="headerlink" title="Ubuntu22.04 解决VREP&#x2F;CoppeliaSim 界面字体过小问题"></a>Ubuntu22.04 解决VREP&#x2F;CoppeliaSim 界面字体过小问题</h2><h3 id="Windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a>Windows10</h3><p>1.右键单击CoppeliaSim.exe（可能的位置：C：\ Program Files \ CoppeliaRobotics \ CoppeliaSimEdu），然后单击“属性”。</p><p>2.在“兼容性”选项卡下</p><p>3.单击“更改高DPI设置”</p><p>4.选中“替代高DPI缩放行为”框</p><p>5.缩放比例–选择“系统”</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>1.找到CoppeliaSim安装位置（例如：&#x2F;opt&#x2F;CoppeliaSimo_Edu_V4_2_0_Ubuntu20_04）<br>2.打开system 文件夹下usrset.txt文件，将变量“ highhandedness”的值更改为2<br>3.重启CoppeliaSim<br><img src="/../img/blogs/coppeliasim.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Coppeliasi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Coppeliasim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/25/hello-world/"/>
    <url>/2024/05/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
